#include <iostream>
#include <string>
#include <vector>

int keysize = 16;
int msgsize = 16;
int nround = 10;

unsigned char RconTable[] = {
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d};


unsigned char SubBox[256] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

unsigned char C[16] = {
    0x02, 0x03, 0x01, 0x01,
    0x01, 0x02, 0x03, 0x01,
    0x01, 0x01, 0x02, 0x03,
    0x03, 0x01, 0x01, 0x02
};

unsigned char InvSubBox[256] = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

unsigned char InvC[16] = {
    0x0e, 0x0b, 0x0d, 0x09,
    0x09, 0x0e, 0x0b, 0x0d,
    0x0d, 0x09, 0x0e, 0x0b,
    0x0b, 0x0d, 0x09, 0x0e
};

using namespace std;

int read_key(const char *filename, std::vector<unsigned char> &K){
    unsigned char byte;
    FILE * input = fopen(filename, "rb");
    if(!input) {
         cout << "file does not exist.....";
         return 1;
    }
    K.clear();
    for (int i = 0; i < keysize; i++){
        int size = fread(&byte, sizeof(char), 1, input);
        if (size == 0) {
            return 1;
        }
        K.push_back(byte);
    };
    fclose(input);
    return 0;
}

int read_one_block(FILE *input, std::vector<unsigned char> &msg){
    unsigned char byte;
    if(!input) {
         return -1;
    }
    msg.clear();
    for (int i = 0; i < msgsize; i++){
        int size = fread(&byte, sizeof(char), 1, input);
        if (size == 0 && msg.size() == 0) {
            return 1;
        }
        if (size == 0) {
            byte = 0;
        }
        msg.push_back(byte);
    };
    return 0;
}

void ShiftRow(std::vector<unsigned char> &T){
    unsigned char tmp = T[0];
    T[0] = T[1];
    T[1] = T[2];
    T[2] = T[3];
    T[3] = tmp;
}

void SubBytes(std::vector<unsigned char> &T){
    T[0] = SubBox[T[0]];
    T[1] = SubBox[T[1]];
    T[2] = SubBox[T[2]];
    T[3] = SubBox[T[3]];
}


std::vector<unsigned char> expandKeys(std::vector<unsigned char> Key){
    std::vector<unsigned char> W;
    if (Key.size() < keysize){
        return W;
    }

    int Wsize = 16 * (nround+1);
    W.resize(Wsize, 0);

    int i = 0;
    for (;i < keysize; i++) {
        W[i] = Key[i];
    }
    while( i < Wsize) {
        std::vector<unsigned char> T(4);
        // T = Wi-1
        for (int j = 0; j < 4; j++){
            T[j] = W[i-(4-j)];
        }
        if (i % keysize == 0) {
            ShiftRow(T);
            SubBytes(T);
            T[0] ^= RconTable[i / keysize];
        }
        // xor with Wi-4
        for (int j = 0; j < 4; j++) {
            T[j] ^= W[i - 16 + j];
        }
        // Wi = T
        for (int j = 0; j < 4; j++) {
            W[i+j] = T[j];
        }
        i += 4;
    }
}


void ShiftRowsInv(std::vector<unsigned char> &msg) {
    unsigned char tmp;
    tmp = msg[13];
    msg[13] = msg[9];
    msg[9] = msg[5];
    msg[5] = msg[1];
    msg[1] = tmp;

    tmp = msg[2];
    msg[2] = msg[10];
    msg[10] = tmp;
    tmp = msg[6];
    msg[6] = msg[14];
    msg[14] = tmp;

    tmp = msg[7];
    msg[7] = msg[11];
    msg[11] = msg[15];
    msg[15] = msg[3];
    msg[3] = tmp;
}

void ShiftRows(std::vector<unsigned char> &msg) {
    unsigned char tmp;
    tmp = msg[1];
    msg[1] = msg[5];
    msg[5] = msg[9];
    msg[9] = msg[13];
    msg[13] = tmp;

    tmp = msg[2];
    msg[2] = msg[10];
    msg[10] = tmp;
    tmp = msg[6];
    msg[6] = msg[14];
    msg[14] = tmp;

    tmp = msg[3];
    msg[3] = msg[15];
    msg[15] = msg[11];
    msg[11] = msg[7];
    msg[7] = tmp;
}

unsigned char galua_mul(unsigned char byte1, unsigned char byte2)
{
    // проверяем умноженине на ноль
    if (byte2 == 0 || byte1 == 0)
        return 0;
    int res = 0;
    int mul = byte1;
    //если последний бит не ноль, то прибавляем к результату byte1;
    if (byte2 & 0b00000001)
        res = (int)mul;
    // сдвигаем, чтоб анализировать следующий бит
    byte2 = byte2 >> 1;
    while (byte2 != 0)
    {
        // умножаем на x(0b10) в поле галуа (накапливаем byte1*x^n)
        if (mul & 0b10000000)
            mul = (mul << 1) ^ 0b00011011;
        else
            mul = mul << 1;
        // если текущий бит не ноль, прибавляем накопленный результат к текущему
        if (byte2 & 0b00000001)
            res = res ^ mul;
        // переходим к следующему биту
        byte2 = byte2 >> 1;
    }
    return res;
}

void MixColumns(std::vector<unsigned char> &M)
{
    for (int j = 0; j < 4; j++)
    {
        std::vector<unsigned char> newcolumn = {0, 0, 0, 0};
        for (int i = 0; i < 4; i++)
        {
            for (int k = 0; k < 4; k++)
                newcolumn[i] = newcolumn[i] ^ galua_mul(M[j  * 4 + k], C[i * 4 + k]);
        }
        for (int i = 0; i < 4; i++)
            M[j * 4 + i] = newcolumn[i];
    }
}

void MixColumnsInv(std::vector<unsigned char> &M)
{
    for (int j = 0; j < 4; j++)
    {
        std::vector<unsigned char> newcolumn = {0, 0, 0, 0};
        for (int i = 0; i < 4; i++)
        {
            for (int k = 0; k < 4; k++)
                newcolumn[i] = newcolumn[i] ^ galua_mul(M[j  * 4 + k], InvC[i * 4 + k]);
        }
        for (int i = 0; i < 4; i++)
            M[j * 4 + i] = newcolumn[i];
    }
}



void encrypt(std::vector<unsigned char> &msg, std::vector<unsigned char> keys){
    // xor with K(0)
    for (int i = 0; i < keysize; i++){
        msg[i] ^= keys[i];
    }

    for (int i = 1; i <= nround; i++) {
        //subbytes
        for (int j = 0; j < msgsize; j++){
            msg[j] = SubBox[msg[j]];
        }
        ShiftRows(msg);
        if (i != nround){
            MixColumns(msg);
        }
        //xor
        for (int j = 0; j < msgsize; j++){
            msg[j] ^= keys[i * msgsize + j];
        }
    }
}

void decrypt(std::vector<unsigned char> &msg, std::vector<unsigned char> keys){
    // xor with K(Last)
    for (int i = 0; i < keysize; i++){
        msg[i] ^= keys[nround*keysize + i];
    }

    for (int i = nround - 1; i >= 0; i--) {

        ShiftRowsInv(msg);
        //subbytes
        for (int j = 0; j < msgsize; j++){
            msg[j] = InvSubBox[msg[j]];
        }
        for (int j = 0; j < msgsize; j++){
            msg[j] ^= keys[i * msgsize + j];
        }
        if (i != 0){
            MixColumnsInv(msg);
        }

    }
}

void to_file( vector<unsigned char> data, FILE* output) {
    for (int i = 0; i < data.size(); i++) {
        unsigned char byte =  data[i];
        fwrite(&byte, sizeof(char), 1, output);
        cout << byte;
    }
}



int main()
{
    cout << "Hello World!" << endl;
    std::string filename, keyfile, outfilename;
    cout << "Input key filename: ";
    cin >> keyfile;
    cout << "Input filename: ";
    cin >> filename;
    cout << "Input output filename: ";
    cin >> outfilename;
    char action;
    cout << "Encrypt(e) or Decrypt(d)? :";
    cin >> action;


    std::vector<unsigned char> Key;
    int error = read_key(keyfile.c_str(), Key);
    if (error){
        cout << "Wrong Key file";
        return 1;
    }

    std::vector<unsigned char> expKeys = expandKeys(Key);

    FILE *f= fopen(filename.c_str(), "rb");
    FILE *out = fopen(outfilename.c_str(), "wb");

    if (!f){
        cout << "cant read file";
        return 1;
    }
    std::vector<unsigned char> msg;
    while (error = (read_one_block(f, msg)) == 0) {
        if (action == 'e') {
            encrypt(msg, expKeys);
        } else if (action == 'd') {
            decrypt(msg, expKeys);
        } else {
            cout << "Wrong action!";
            return 1;
        }
        to_file(msg, out);
    }

    fclose(f);
    fclose(out);


    return 0;
}
